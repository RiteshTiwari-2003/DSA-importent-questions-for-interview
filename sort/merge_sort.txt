def merge-sort(arr):
    if len(arr)<=1:
        return arr
    mid=len(arr)//2
    left = merge-sort(arr[:mid])
    right=merge-sort(arr[mid:])
    #merge both halves
    merged=[]
    i=j=0
    while i<len(left) and j<len(right):
        if left[i]<=right[j]:
            merged.append(left[i])
            i+=1
        else:
            merged.append(right[j])
            j+=1
    merged.append(left[i:])
    merged.append(right[j:])
    return merged 
arr = [5, 3, 8, 6, 2, 7, 4, 1]
print("Sorted:", merge_sort_brute(arr))

in java 

import java.util.*;
public class mergeSort{
    public static int[] mergeSort(int [] arr){
        if(arr.length<=1){
            return arr;
        }
        int mid=arr.length/2;
        int[] left=Arrays.copyOfRange(arr,0,mid);
        int[] right=Arrays.copyOfRange(arr,mid,arr.length);
        return merge(mergeSort(left),mergeSort(right));

    }
    public static int[] merge(int[] left,int[] right){
        int [] merged=new int[left.length+right.length];
        int i=0,j=0,k=0;
        while(i<left.length && j<right.length){
            if(left[i]<=right[j]){
                merged[k++]=left[i++];

            }
            else{
                merged[k++]=right[j++];
            }
        }
        while(i<left.length){
            merged[k++]=left[i++];

        }
        while(j<right.length){
            merged[k++]=right[j++];
        }
        return merged;
    }
    public static void main(String[] args){
        int[] arr={5,3,8,9 ,10,26};
        int [] sorted=mergeSort(arr);
         System.out.println("Sorted: " + Arrays.toString(sorted));    }
}

//2 . better approach 
in python 
def merge-sort_better(arr):
    def merge(arr,temp,left,mid,right):
        i,j,k=left,mid=1,left;
        while i<=mid and j<=right:
            ifarr[i]<=arr[j]:
                temp[k]=arr[i]
                i+=1
            else:
                temp[k]=arr[j]
                j+=1
            k+=1
        while i<=mid:
            temp[k]=arr[i]
            i+=1
            k+=1
        while j<=right:
            temp[k]=arr[j]
            k+=1
            j+=1
        for i in range(left,right+1):
            arr[i]=temp[i]
        
    def merge-sort(arr,temp,left,right):
        if left < right:
            mid = (left + right) // 2
            merge_sort(arr, temp, left, mid)
            merge_sort(arr, temp, mid + 1, right)
            merge(arr, temp, left, mid, right)
    temp=[0]*len(arr)
    merge-sort(arr, temp, 0, len(arr) - 1)
    return arr
arr = [5, 3, 8, 6, 2, 7, 4, 1]
print("Sorted:", merge_sort_better(arr))

better java
import java.util.*;

public class MergeSortBetter {
    public static void mergeSort(int[] arr) {
        int[] temp = new int[arr.length];
        mergeSort(arr, temp, 0, arr.length - 1);
    }

    private static void mergeSort(int[] arr, int[] temp, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, temp, left, mid);
            mergeSort(arr, temp, mid + 1, right);
            merge(arr, temp, left, mid, right);
        }
    }

    private static void merge(int[] arr, int[] temp, int left, int mid, int right) {
        int i = left, j = mid + 1, k = left;

        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) temp[k++] = arr[i++];
            else temp[k++] = arr[j++];
        }

        while (i <= mid) temp[k++] = arr[i++];
        while (j <= right) temp[k++] = arr[j++];

        for (int l = left; l <= right; l++) {
            arr[l] = temp[l];
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 6, 2, 7, 4, 1};
        mergeSort(arr);
        System.out.println("Sorted: " + Arrays.toString(arr));
    }
}

#### 3, optimal approach 
def merge_sort_optimal(arr):
    def merge_sort(arr,temp,left,right):
        if lleft>=right:
            return 
        mid=(left+right)//2;
        merge_sort(arr,temp,left,mid);
        merge_sort(arr,temp,mid+1,right);
        if (arr[mid]<=arr[mid+1]){
            return 
        }
        merge(arr,temp,left,mid,right);
    def merge(arr,temp,left,id,right):
        i,j,k=left,mid+1,left;
        while i<=mid and j<=right:
            if(arr[i]<=arr[j]):
                temp[k]=arr[i]
                i+=1
            else:
                temp[k]=arr[j]
                j+=1
            k+=1
        while i<=mid:
            temp[k]=arr[i]
            i+=1
            k+=1
        while j<=right:
            temp[k]=arr[j]
            j+=1
            k+=1
        for l in range(left,right+1):
            arr[l]=temp[l]
    temp = [0] * len(arr)
    merge_sort(arr, temp, 0, len(arr) - 1)
    return arr
arr = [5, 3, 8, 6, 2, 7, 4, 1]
print("Sorted:", merge_sort_optimal(arr))

# 3 optimal approach 
java 
import java.util.*;
public class MergeSortOptional{
    public static void mergeSort(int[] arr){
        int[] temp=new int[arr.length];
        mergeSort(arr,temp,0,arr.length-1);
    }
    private static void mergeSort(int[] arr,int[] temp,int left , int right){
        if(left>=right){
            return
        }
        int mid=(left+right)//2;
        mergeSort(arr,temp,left,mid);
        mergeSort(arr,temp,mid+1,right);
        //skip merge if already sorted 
        if(arr[mid]<=arr[mid+1]){
            return ;
        }
        merge(arr,temp,left,mid,right);
    }
    private static void merge(int[] arr,int[] temp, int left,int mid, int right){
        int i=left,j=mid+1,k=left;
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) temp[k++] = arr[i++];
            else temp[k++] = arr[j++];
        }
        while (i <= mid) temp[k++] = arr[i++];
        while (j <= right) temp[k++] = arr[j++];

        for (int l = left; l <= right; l++) {
            arr[l] = temp[l];
        }
    }
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 6, 2, 7, 4, 1};
        mergeSort(arr);
        System.out.println("Sorted: " + Arrays.toString(arr));
    }
}

