#### longest consecutive sequence 

1. brute force approach 
in python 
def longest_cons_seq(arr):
    if not arr:
        return 0
    arr.sort()
    longest=1
    current=1
    for i in range(1,len(arr)):
        if arr[i]!=arr[i-1]:
            if arr[i]==arr[i-1]+1:
                current+=1
                longest=max(longest,current)
            else:
                current=1
    return longest

in java brute force approach 
import java.util.Arrays;
public class Main{
    public static int longestConsecutiveSequence(int[] arr){
        if(arr.length==0) return 0;
        Arrays.sort(arr);
        int longest=1,current=1;
        for(int i=1;i<arr.length;i++){
            if(arr[i]!=arr[i-1]){
                if(arr[i]==arr[i-1]+1){
                    current++;
                    longest=Math.max(longest,current);
                }
                else{
                    current=1;
                }
            }
        }
        return longest;
    }
    public static void main(String[] args){

    }
}

better approach in python 
use hashset
def longest_cons_seq(arr):
    if not arr:
        return 0
    num_sets=set(arr)
    longest=0
    for num in num_sets:
        if num -1 not in num_sets:
            current=num
            streak=1
            while current +1 in num_sets:
                current+=1
                streak+=1
            longest=max(longest,streak)
    return longest

in java better approach 
import java.uitl.HashSet;
import java.util.Set;
public class Main{
    public static int LongestConsecutiveBetter(int[] nums){
        Set<Integer> set=new HashSet<>();
        for (int num:nums){
            set.add(num);
        }
        int longest=0;
        for(int num:set){
            if(!set.contains(num-1)){
                int current=num;
                int streak=1;
                while(set.contains(current+1)){
                    current++;
                    streak++;
                }
                longest=Math.max(longest,streak);
            }
        }
        return longest;
    }
}
