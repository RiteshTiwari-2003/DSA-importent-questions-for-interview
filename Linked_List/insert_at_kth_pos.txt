insertr at kth position in linkedlist 
brute force approach in python 
def Node:
    def __init__(self,data):
        self.data=data
        self.next=None
def insert_at_kth_position(head,k,value):
    arr=[]
    temp=head
    while temp:
        arr.append(temp.data)
        temp=temp.next
    arr.insert(k-1,value)
    dummy=Node(0)
    temp=dummy
    for val in arr:
        temp.next=Node(val)
        temp=temp.next
    return dummy.next
head=Node(1)
head.next=Node(2)
head.next.next=Node(3)
head=insetrt_data_at_keth_position(3,3,head)

better approach in python 
def insert_element-at_kth_postion(head,k,value):
    length=0
    temp=head
    while temp:
        length+=1
        temp=temp.next
    if k<1 or k>length+1:
        return head
    newNode=Node(value)
    if k==1:
        newNode.next=head
        return newNode
    temp=head
    for _ in range(k-2):
        temp=temp.next
    newNode.next=temp.next
    temp.next=newNode
    return head

optimal approach in python 
def insert_at_end_optimal(head,k,value):
    newNode=Node(value)
    if k==1:
        newNode.next=head
        return newNodde
    temp=head
    for _ in range(k-2):
        if not temp:
            return head
        temp=temp.next
    newNode.next=temp.next
    temp.next=newNode
    return head

### how to repreesent singlylinkedlist 
a singly linkedlist is a linear data stucture where each element(called node) contain data and next(Pointer/reference)
1. data : the value stored in the node 
2. next : the address reerance of the next node in the list 
unike array:
memory is not contiguous 
insertion deletion is more efficient 
random access is not allowed 

Node Sturcture 
in most anguage a node can be represented as a class or Sturcture
in c
struct Node{
    int data;
    struct Node* next;
};

in java 
class Node[
    int data;
    Node next;
    Node(int data){
        this.data=data;
        this.next=null;
    }
]

in python 
class Node;
    def __init__(self,data);
        self.data=data
        self.next=None 
Linked List class 

we usually maintain the head pointer to the first node 
class Node:
    def __init__(self,data):
        self.data=data
        self.next=null

class SinglyLinkedList:
    def __init__(self):
        self.head=None 
    def insert(self,data);
        new_node=Node(data)
        if not self.head:
            self.head=new-node
            return 
        temp=self.head
        while temp.next;
            temp=temp.next
        temp.next=new-node
    def display(self);
        temp=self.head
        while temp;
            print(temp.data,end="->")
            temp=temp.next
        print("NULL")
s1=SinglyLinkedList()
s1.insert(10)
s1.insert(20)
s1.insert(30)
s1.display()