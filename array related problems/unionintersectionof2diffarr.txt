### union and intersection of two different sorted array 
def union_brute(arr1,arr2):
    res=[]
    for val in arr1:
        if val not in res:
            res.append(val)
    for val in arr2:
        if val not in res:
            res.append(val)
    return sorted(res)
def intersection_brute(arr1,arr2):
    res=[]
    for val in arr1:
        if val in arr2 and val not in res:
            res.append(val)
    return sorted(res)
arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 5, 6]
print("Brute Union:", union_brute(arr1, arr2))
print("Brute Intersection:", intersection_brute(arr1, arr2))

brute force approach in java 
import java.util.*;
public class unionintersectarray{
    public static List<Integer> union(int[] arr1,int[] arr2){
        List<Integer> res=new ArrayList<>();
        for(int a:arr1){
            if(!res.contains(a))res.add(a);
        }
        for(int a:arr2){
            if(!res.contains(a))res.add(a);        }
        Collections.sort(res);
        return res;
    }
    pubic static List<Integer> intersection(int[] arr1,int [] arr2){
        List<Integer> res=new ArrayList<>();
        for(int a:arr1){
            for(int b:arr2){
                if(a==b && !res.contains(a)){
                    res.add(a);
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;
    }
    public static void main(String[] args){
        int[] arr1={1,2,3,4,5};
        int[] arr2={2,3,4,5,6};
        System.out.println("Brute Union: " + union(arr1, arr2));
        System.out.println("Brute Intersection: " + intersection(arr1, arr2));

    }
}

2. better approach in python 
def union_better(arr1,arr2):
    return sorted(set(arr1).union(set(arr2)))
def intersection_better(arr1,arr2):
    return sorted(set(arr1).intersection(set(arr2)))
arr1=[1,2,3,4,5]
arr2=[2,3,4,5]
print("Better Union:", union_better(arr1, arr2))
print("Better Intersection:", intersection_better(arr1, arr2))

java better approach 
import java.util.*;
public class UnionIntersectionbetter{
    public static List<Integer> union(int[]arr1, int[]arr2){
        Set<Integer> set=new TreeSet<>();
        for(int a:arr1){
            set.add(a);
        }
        for(int a:arr2){
            set.add(a);
        }
        return new ArrayList<>(set);
    }
    public static List<Integer> intersection(int[] arr1,int[] arr2){
        Set<Integer> set1=new HashSet<>();
        Set<Integer> result=new TreeSet<>();
        for(int a:arr1){
            set1.add(a)

        }
        for(int a:arr2){
            if(set1.contains(a))result.add(a);
        }
        return new ArrayList<>(result);
    }
    public static void main(String[] args){
        int[] arr1={1,2,3,4,5};
        int[] arr2={2,3,4,5};
        System.out.println("Better Union: " + union(arr1, arr2));
        System.out.println("Better Intersection: " + intersection(arr1, arr2));
    }
}

3. optimal approach in python 
def union_optimal(arr1,arr2):
    i=j=0
    n,m=len(arr1),len(arr2)
    res=[]
    while i<n and j<m:
        if arr1[i]<arr2[j]:
            if not res or res[-1]!=arr1[i]:
                res.append(arr1[i])
            i+=1
        elif arr2[j] < arr1[i]:
            if not res or res[-1]!=arr2[j]:
                res.append(arr2[j])
            j+=1
        else:
            if not res or res[-1]!=arr1[i]:
                res.append(arr1[i])
            i+=1
            j+=1
    while i<n:
        if not res or res[-1]!=arr1[i]:
            res.append(arr1[i])
        i+=1
    while j<m:
        if not res or res[-1]!=arr2[j]:
            res.append(arr2[j])
        j+=1
    return res
def intersection_optimal(arr1,arr2):
    i=j=0
    n,m=len(arr1),len(arr2)
    res=[]
    while i <n and j<m:
        if arr1[i]==arr2[j]:
            if not res or res[-1]!=arr1[i]:
                res.append(arr1[i])
            i+=1
            j+=1
        elif arr1[i]<arr2[j];
            i+=1
        else :
            j+=1
    return res
arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 5, 6]
print("Optimal Union:", union_optimal(arr1, arr2))
print("Optimal Intersection:", intersection_optimal(arr1, arr2))

java optimal solutiion 
import java.util.*;
public class UnionOptimal{
    public static List<Integer> union(int[] arr1,int[] arr2){
        int i=0,j=0;
        int n=arr1.length;m=arr2.ength;
        List<Integer> res new ArrayList<>();
        while(i<n && j<m){
            if(arr1[i]<arr2[j]){
                if(res.isEmpty() || res.get(res.size()-1)!=arr1[i]){
                    res.add(arr1[i]);
                }
                i++;
            }
            else if(arr2[j]<arr1[i]){
                if(res.isEmpty()||res.get(res.size()-1)!=arr2[j]){
                    res.add(arr2[j]);

                }
                j++;
            }
            else{
                if(res.isEmpty()|| res.get(res.size()-1)!=arr1[i]){
                    res.add(arr1[i]);
                }
                i++;
                j++;
            }
        }
        while(i<n){
            if(res.isEmpty()||res.get(res.size()-1)!=arr1[i]){
                res.add(arr1[i]);
            }
            i++;
        }
        while(j<m){
            if(res.isEmpty()||res.get(res.size()-1)!=arr2[j]){
                res.add(arr2[j]);
            }
            j++;
        }
        return res;
    }
    public static List<Integer> intersection(int[] arr1,int[] arr2){
        int i=0,j=0;
        int n=arr1.length,m=arr2.length;
        List<Integer> res=new ArrayList<>();
        while(i<n && j<m){
            if(arr1[i]==arr2[j]){
                if(res.isEmpty()||res.get(res.size()-1)!=arr1[i]){
                    res.add(arr1[i]);
                }
                i++;
                j++;
            }
            else if(arr1[i]<arr2[j]){
                i++;
            }
            else{
                j++;
            }
        }
        return res;
    }
    public sttic void main(String[] args){
        int[] arr1={1,2,5,4,7,8};
        int[]arr2={1,3,2,9,5};
        System.out.println("Optimal Union: " + union(arr1, arr2));
        System.out.println("Optimal Intersection: " + intersection(arr1, arr2));
    }
}

