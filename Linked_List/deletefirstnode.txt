### delete first node in linked list 
1. brute force approach in python  
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
def delete_first_brutefoce(head):
    if not head:
        return None 
    values=[]
    temp=head
    while temp:
        values.append(temp.data)
        temp=temp.next
    values.pop(0)
    if not values:
        return None
    new-head=Node(values[0])
    curr=new-head
    for  val in values[1:]:
        curr.next=Node(val)
        curr=curr.next
    return new_head

in java brute force approach 

class Node{
    int data;
    Node next;
    Node(int data){
        this.data=data;
        this.next=null;
    }

}
public class linkedlistops{
    public static Node deleteFirstbruteForce(Node head){
        if(head==null){
            return null;
        }
        java.util.ArrayList<Integer> values=new java.util.ArrayList<>();
        Node temp=head;
        while(temp!=null){
            values.add(temp.data);
            temp=temp.next;
        }
        if (values.size()<=1){
            return null;
        }
        Node newHead=new Node(values.get(1));
        Node curr=newHead
        for(int i=2;i<values.size();i++){
            curr.next=new Node(values.get(i));
            curr=curr.next;
        }
        return newHead;
    }
}

better approach 
just shift head pointer to next head.next pointer 
def delete-first_node(head):
    if not head:
        return None
    return head.next

in java 

public static Node deleteFirstNode(Node head){
    if head==null return null;
    return head.next;
}

3. optimal approach in python 
same as better approach but explicitly free the memory of the removed node 

(in python gc handle it automatically , in java gc also handle it but we can null reference )
def delete-first_optimal(head):
    if not head:
        return None 
    temp=head
    head=head.next
    temp.next=None
    return head

java optimal code 
public static Node deleteFirstoptimal(Node head){
    if (head==null) return null;
    Node temp=head;
    head=head.next;
    temp.next=null;
    return head;
}