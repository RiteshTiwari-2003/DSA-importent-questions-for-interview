class Node:
    def __inti__(self,data):
        self.data=data
        self.next=None 
class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None
    def insert_at_end_bruteforce(self,data):
        new_node=Node(data)
        if self.head==None:
            self.head=new-Node
            return 
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=new_node
    ### better approach 
    def inset_at_end_better(self,data):
        new_node=Node(data)
        if not self.head:
            self.head=new_node
            return 
        self._get_last_node().next=new_node
    def _get_last_node(self);
        temp=self.head
        while temp.next:
            temp=temp.next
        return temp
    ### optimal approach 
    def insert_at_optimal(self,data):
        newNode=Node(data)
        if not self.head:
            self.head=newNode
            self.tail=newNode
            return 
        self.tail.next=newNode
        self.tail=newNode
    def dispay(self);
        temp=self.head
        while temp:
            print(temp.data,end="->")
            temp=temp.next
        print("None")
ll = LinkedList()
ll.insert_at_end_bruteforce(10)
ll.insert_at_end_bruteforce(20)
ll.insert_at_end_better(30)
ll.insert_at_end_optimal(40)
ll.insert_at_end_optimal(50)
ll.display()
