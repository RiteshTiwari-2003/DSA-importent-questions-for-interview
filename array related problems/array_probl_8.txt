### longest subarray with given sum k (positive0)

first understand progrsm of printing all subarray of array using all three approach 
brute forcer approach 
def print-sub_arr(arr):
    n=len(arr)
    for i in range(n):
        for j in range(i,n):
            subarr=[]
            for k in range(i,j+1):
                subarr.append(arr[k])
            print(subarr)
print("Brute Force:")
print_subarrays_brute([1, 2, 3])

in java 
public class SubArraybrute{
    public static void printSubArrays(int[] arr){
        int n=arr.length;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                System.out.print("[");
                for(int k=i;k<=j;k++){
                    System.out.print(arr[k]);
                    if(k<j){
                        System.out.print(",");
                    }
                }
                System.out.println("]");
            }
        }
    }
    public static void main(String[] args) {
        System.out.println("Brute Force:");
        int[] arr = {1, 2, 3};
        printSubarrays(arr);
    }
}

better approach 
in python 
def print_sub_array_better(arr):
    n=len(arr)
    for i in range(n):
        subarray=[]
        for j in range(i,n):
            subarray.append(arr[j])
            print(subarray)
print("Better Approach:")
print_subarrays_better([1, 2, 3])

better approach in java 
public class subarraybetter{
    public static void printsubbarray(int[] arr){
        int n=arr.length;
        for(int i=0;i<n;i++){
            StringBuilder subar=new StringBuilder("[");
            for(int j=i;j<n;j++){
                subar.append(arr[j]);
                if(j<n-1 && j != n-1) subar.append(",");
                System.outprintln(subar+"]");
            }
        }
    }
    public static void main(String[] args) {
        System.out.println("Better Approach:");
        int[] arr = {1, 2, 3};
        printSubarrays(arr);
    }
}

optimal approach in python 
using 2 pointer approach 
def print_subarray_optimal(arr):
    n=len(arr)
    for start in range(n):
        for end in range(start,n):
            print(arr[start:end+1])
print("Optimal Approach:")
print_subarrays_optimal([1, 2, 3])

in java 
public class SubarrayOptimal {
    public static void printSubarrays(int[] arr) {
        int n = arr.length;
        for (int start = 0; start < n; start++) {
            for (int end = start; end < n; end++) {
                System.out.print("[");
                for (int k = start; k <= end; k++) {
                    System.out.print(arr[k]);
                    if (k < end) System.out.print(", ");
                }
                System.out.println("]");
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("Optimal Approach:");
        int[] arr = {1, 2, 3};
        printSubarrays(arr);
    }
}
#### like now write longest subarray with sum k (postive) 
1. brute force approach in python 
def longest_subarr_sumk(arr):
    n=len(arr)
    max_len=0
    for i in range(n):
        for j in range(i,n):
            total=0
            for m in range(i,j+1):
                tptal+=arr[m]
            if total==k:
                max_len=max(max_len,j-i+1)
    return max_len
print("Brute force approach :",longest_subarray_sum_k_brute([1, 2, 1, 1, 1], 3))

brute force in java 
public class LongestSubArraySumKBrute{
    public static int longestsubarray(int[] arr, int k){
        int n=arr.length;
        int maxLen=0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int sum=0;
                for(int m=i;m<=j;m++){
                    sum+=arr[m];
                }
                if(sum==k){
                    maxLen=Math.max(maxLen,j-i+1);
                }
            }
        }
        return maxLen;
    }
    public static void main(String[] args) {
        int[] arr = {1, 2, 1, 1, 1};
        int k = 3;
        System.out.println("Brute Force: " + longestSubarray(arr, k)); // Output: 3
    }
}

2. better approach in python 
def longest_ssubarray_sum(arr):
    n=len(arr)
    max_len=0
    for i in range(n):
        total=0
        for j in range(i,n):
            total+=arr[j]
            if total==k:
                max_len=max(max_len,j-i+1)
            elif total>k:
                break
    return max_len
print("Better Approach:", longest_subarray_sum_k_better([1, 2, 1, 1, 1], 3))

java better approach 
public class LongestSubArraySumBetter{
    public static int longestSubArray(int[] arr,int k){
        int maxLen=0;
        int n=arr.length;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum==k){
                    maxLen=Math.max(maxLen,j-i+1)

                }
                else if(sum>k){
                    break;
                }
            }
        }
        return maxLen;
    }
    public static void main(String[] args) {
        int[] arr = {1, 2, 1, 1, 1};
        int k = 3;
        System.out.println("Better Approach: " + longestSubarray(arr, k)); // Output: 3
    }
}

3. optimal approach in python 
def longest_subarray_sumk(arr):
    n=len(arr)
    left=0
    right=0
    total=0
    max_len=0
    while right<n:
        total+=arr[right]
        while total >k:
            total-=arr[left]
            left+=1
        if total ==k:
            max_len=max(max_len,right-left+1)
        right+=1
    return max_len

in java optimal solution 
public class LongestSubarray{
    public static int longestSubarraysumk(int[] arr,int k){
        int n=arr.length;
        int left=0,right=0;
        int sum=0, maxLen=0;
        while (right<n){
            sum+=arr[right];
            while (sum>k){
                sum-=arr[left];
                left++;
            }
            if(sum==k){
                maxLen=Math.max(maxLen,right-left+1);
            }
            right++;
        }
        return maxLen;
    }
    publoic static void main(String[] args){
        int [] arr={1,2,1,1,1};
        int k=3;
        System.out.println("Optimal Approach: " + longestSubarray(arr, k));
    }
}
