### insert element at the tail position in doubly linked list 

in python 

class Node:
    def __init__(self,data):
        self.data=data
        self.prev=None
        self.next=None
def insert_at_tail(head,data):
    new_node=Node(data)
    if head is None:
        return new_node
    temp=head
    while temp.next is not None:
        temp=temp.next
    temp.next=new_node
    new_node.prev=temp
    return head 
def print_list(head):
    temp=head
    while temp:
        print(temp.data,end="<->")
        temp=temp.next
    print("None")
head=Node(10)
head=insert_at_tail(head,30)
head=insert_at_tail(head,40)
print_list(head)

insert at kthh postion in doubly linked list 

class Node:
    def __init__(self,data):
        self.data=data
        self.prev=None
        self.next=None
class DoublyLinkedList:
    def __init__(self):
        self.head=None
    def insert_at_k(self,k,data):
        new_node=Node(data)
        if k==1:
            new_node.next=self.head
            if self.head:
                self.head.prev=new_node
            self.head=new-node
            return 
        temp=self.head
        count=1
        while temp and count<k-1:
            temp=temp.next
            count+=1
        if not temp:
            print("Invalid")
            return 
        new_node.next=temp.next
        if temp.next:
            temp.next.prev=new_node
        temp.next=new_node
        new_node.prev=temp
    def display(self):
        temp=self.head
        while temp:
            print(temp.data,end="<->")
            temp=temp.next
        print("None")
dll=DoublyLinkedList()
dl.insert_all_k(1,10)
dll.insert_at_k(2, 20)
dll.insert_at_k(2, 15)
dll.insert_at_k(4, 25)
dll.display()

java implementation 
class Node{
    int data;
    Node prev,next;
    Node(int data){
        this.data=data;
        this.prev=null;
        this.next=null;
    }
}
class DoublyLinkedList{
    Node head;
    void insert_at_kth(int k,int data){
        Node newNode=new Node(data);
        if(k==1){
            newNode.next=head;
            if head!=null{
                head.prev=newNode;
            }
            head=newNode;
            return;
        }
        Node temp=head;
        int count=1;
        while(temp!=null && count<k-1){
            temp=temp.next;
            count++;
        }
        if(temp==null){
            System.out.println("Invalid position");
            return;
        }
        newNode.next=temp.next;
        if(temp.next!=null){
            temp.next.prev=newNode;
        }
        temp.next=newNode;
        newNode.prev=temp;
    }
    void display(){
        Node temp=head;
        while(temp!=null){
            System.out.println(temp.data+"<->");
            temp=temp.next;
        }
        System.out.println("null");
    }
    public static void main(String[] args){
        DoublyLinkedList dll=new DoublyLinkedList();
        dll.insert(1,10);
        dll.insert(2,20);
        dll.insert(2,30);
        dll.display();
        
    }
}