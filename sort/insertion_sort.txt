//insertion sort 
// python brute force approach

def insertion_sort(arr):
    n=len(arr)
    for i in range(1,n):
        j=i
        while j>0 and arr[j-1]>arr[j]:
            arr[j],arr[j-1]=arr[j-1],arr[j]
            j-=1
    return arr
arr = [9, 5, 1, 4, 3]
print("Sorted:", insertion_sort_brute(arr))

//java brute force approach 
public class insertsort{
    public static void insertionsort(int[] arr){
        int n=arr.lenght;
        for(int i=1;i<n;i++){
            int j=i;
            while(j>0 && arr[j-1]>arr[j]){
                // swap
                int temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
                j--;
            }
        }
    }
    public static void main(String[] args) {
        int[] arr = {9, 5, 1, 4, 3};
        insertionSort(arr);
        for (int num : arr)
            System.out.print(num + " ");
    }
}

//2 . better approach python 
def insertionsort(arr):
    n=len(arr)
    for i in range(1,n):
        key=arr[i]
        j=i-1
        while(j>=0 and arr[j]>key):
            arr[j+1]=arr[j]
            j-=1
        arr[j+1]=key
    return arr
arr = [9, 5, 1, 4, 3]
print("Sorted:", insertion_sort_better(arr))

//in java 
public class insertarr[
    public static void insertionsort(int[] arr){
        int n=arr.lenght;
        for(int i=1;i<n;i++){
            int k=arr[i];
            int j=i-1;
            while(j>=0 && arr[j]>key){
                arr[j+1]=arr[j];
                j--;
            }
            arr[j+1]=key;
        }
    }
    public static void main(String[] args) {
        int[] arr = {9, 5, 1, 4, 3};
        insertionSort(arr);
        for (int num : arr)
            System.out.print(num + " ");
    }
]

// 3 . optimal approach 
in python 
def insertionsort(arr):
    n=len(arr)
    for i in range(1,n):
        key=arr[i]
        j=i-1
        # Early break if already in correct position
        if arr[j] <= key:
            continue
        while(j>=0 and arr[j]>key):
            arr[j+1]=arr[j]
            j-=1
        arr[j+1]=key
    return arr
arr = [9, 5, 1, 4, 3]
print("Sorted:", insertion_sort_better(arr))

in java 
public class insertionarr{
    public static void insertionarr(int[] arr){
        int n=arr.length;
        for(int i=1;i<n;i++){
            int key=arr[i];
            int j=i-1;
            // Early exit check
            if (arr[j] <= key)
                continue;
            while(j>=0 && arr[j]>key){
                arr[j+1]=arr[j]
                j--;
            }
            arr[j+1]=key;
        }
    }
    public static void main(String[] args){
        int[] arr={9,5,4,1,3};
        insertionSort(arr);
        for(int num:arr){
            System.out.println(num+" ");
        }
    }
}