insertr at kth position in linkedlist 
brute force approach in python 
def Node:
    def __init__(self,data):
        self.data=data
        self.next=None
def insert_at_kth_position(head,k,value):
    arr=[]
    temp=head
    while temp:
        arr.append(temp.data)
        temp=temp.next
    arr.insert(k-1,value)
    dummy=Node(0)
    temp=dummy
    for val in arr:
        temp.next=Node(val)
        temp=temp.next
    return dummy.next
head=Node(1)
head.next=Node(2)
head.next.next=Node(3)
head=insetrt_data_at_keth_position(3,3,head)

better approach in python 
def insert_element-at_kth_postion(head,k,value):
    length=0
    temp=head
    while temp:
        length+=1
        temp=temp.next
    if k<1 or k>length+1:
        return head
    newNode=Node(value)
    if k==1:
        newNode.next=head
        return newNode
    temp=head
    for _ in range(k-2):
        temp=temp.next
    newNode.next=temp.next
    temp.next=newNode
    return head

optimal approach in python 
def insert_at_end_optimal(head,k,value):
    newNode=Node(value)
    if k==1:
        newNode.next=head
        return newNodde
    temp=head
    for _ in range(k-2):
        if not temp:
            return head
        temp=temp.next
    newNode.next=temp.next
    temp.next=newNode
    return head

### how to repreesent singlylinkedlist 
a singly linkedlist is a linear data stucture where each element(called node) contain data and next(Pointer/reference)
1. data : the value stored in the node 
2. next : the address reerance of the next node in the list 
unike array:
memory is not contiguous 
insertion deletion is more efficient 
random access is not allowed 

Node Sturcture 
in most anguage a node can be represented as a class or Sturcture
in c
struct Node{
    int data;
    struct Node* next;
};

in java 
class Node[
    int data;
    Node next;
    Node(int data){
        this.data=data;
        this.next=null;
    }
]

in python 
class Node;
    def __init__(self,data);
        self.data=data
        self.next=None 
Linked List class 

we usually maintain the head pointer to the first node 
class Node:
    def __init__(self,data):
        self.data=data
        self.next=null

class SinglyLinkedList:
    def __init__(self):
        self.head=None 
    def insert(self,data);
        new_node=Node(data)
        if not self.head:
            self.head=new-node
            return 
        temp=self.head
        while temp.next;
            temp=temp.next
        temp.next=new-node
    def display(self);
        temp=self.head
        while temp;
            print(temp.data,end="->")
            temp=temp.next
        print("NULL")
s1=SinglyLinkedList()
s1.insert(10)
s1.insert(20)
s1.insert(30)
s1.display()

implemet linkedlist in java 
class Node{
    int data;
    Node next;
    Node(int data){
        this.data=data;
        this.next=null;
    }
}
class SinglyLinkedList{
    Node head;
    public void insertAtEnd(int data){
        Node newNode=new Node(data);
        if head==null{
            head=newNode;
            return;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newNode;
    }
    public void insertAtBEggining(int data){
        Node newNode=new Node(data);
        newNode.next=head;
        head=newNode;
    }
    public void deleteNode(int key){
        Node temp=head,prev=null;
        if(temp!=null && temp.data==key){
            head=temp.next;
            return ;
        }
        while(temp!=null && temp.data!=key){
            prev=tmp;
            temp=temp.next;
        }
        if(temp==null){
            return;

        }
        prev.next=temp.next;
    }
    public void display(){
        Node temp=head;
        while(temp!=null){
            System.out.println(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("null");

    }
    public static void main(String[] args){
        SinglyLinkedList list = new SinglyLinkedList();
        list.insertAtEnd(20);
        list.insertAtEnd(20);
        list.insertAtBeginning(5);
        list.insertAtEnd(30);
        list.display(); // 5 -> 10 -> 20 -> 30 -> null

        list.deleteNode(20);
        list.display(); //
    }
}

implement in python 
class Node :
    def __init__(self,data):
        self.data=data
        self.next=None
class SinglyLinkedList:
    def __init__(self);
        self.head=None
    def insert_atEnd(self.data);
        new_node=Node(datya)
        if not self.head:
            self.head=newNode
            return 
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=newNode
    def insert_at_beggining(self,data):
        new_node=Node(data)
        new_node.next=self.head
        self.head=newNode 
    def delete_node(self,key);
        temp=self.head
        if temp and temp.data==key:
            self.head=temp.next
            return 
        prev=None
        while temp and temp.data!=key:
            prev=temp
            temp=temp.next
        if temp==None:
            return 
        prev.next=temp.next
    def display(self):
        temp=self.head
        while temp:
            print(temp.data,end="->")
            temp=temp.next
        print("None')
if __name__=="__main__":
    s1=SinglyLinkedList()
    s1.insert-data_at_beggning(30)
    sll.insert_at_end(20)
    sll.insert_at_beginning(5)
    sll.insert_at_end(30)
    sll.display()  # 5 -> 10 -> 20 -> 30 -> None

    sll.delete_node(20)
    sll.display()  # 5 

