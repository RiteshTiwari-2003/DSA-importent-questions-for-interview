what is the doubly linkedlist ?
a doubly linked list is a linear data structure where each node has two reference :
    prev and next 
    prev : pints to the previous node 
    next : points to the next node 

implementation in java 
class Node{
    int data;
    Node prev;
    Node next;
    Node(int data){
        this.data=data;
        this.prev=null;
        this.next=null;
    }
}
class DoublyLinkedList{
    Node head;
    public void insertAtBeginning(int data){
        Node newNode=new Node(data);
        if(head!=null){
            newNode.next=head;
            head.prev=newNode;
        }
        head=newNode;
    }
    public void insertAtEnd(int data){
        Node newNode=new Node(data);
        if (head==null){
            head=newNode;
            return;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newnode;
        newnode.prev=temp;
    }
    public void deleteNode(int key){
        Node temp=head;
        while(temp!=null && temp.data!=key){
            temp=temp.next;
        }
        if(temp==null){
            return;
        }
        if(temp.prev!=null){
            temp.prev.next=temp.next;
        }
        else[
            head=temp.next;
        ]
        if(temp.next!=null){
            temp.next.prev=temp.prev;
        }
    }
    public void displayForword(){
        Node temp=head;
        while(temp!=null){
            System.out.println(temp.data+"<->");
            temp=temp.next;

        }
        System.out.println("NULL");
    }
    public void displayBackword(){
        Node temp=head;
        if (temp==null){
            return;
        }
        while(temp.next!=null){
            temp=temp.next;
        }
        while(temp!=null){
            System.out.println(temp.data+"<->");
            temp=temp.prev;
        }
        System.out.print("null");
    }
    public static void main(String[] args)[
        DoublyLinkedList dl=new DoublyLinkedList();
        dl.insertAtBeggining(10);
        dll.insertAtEnd(20);
        dll.insertAtBeginning(5);
        dll.insertAtEnd(30);

        dll.displayForward();   // 5 <-> 10 <-> 20 <-> 30 <-> null
        dll.displayBackward();  // 30 <-> 20 <-> 10 <-> 5 <-> null

        dll.deleteNode(20);
        dll.displayForward();  

    ]
}