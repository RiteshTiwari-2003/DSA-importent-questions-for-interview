class Node:
    def __init__(self,data):
        self.data=data
        self.prev=None
        self.next=None
def array-to_del(arr):
    if not arr:
        return None
    head=Node(arr[0])
    curr=head
    for i in range(1,len(arr)):
        new_node=Node(arr[i])
        curr.next=new_node
        new_node.prev=curr
        curr=new_node
    return head
def print-forword(head):
    curr=head
    while curr:
        print(curr.data,end="<->" if curr.next else "")
        curr=curr.next
    print()
arr = [10, 20, 30, 40, 50]
dll_head = array_to_dll(arr)
print("Doubly Linked List (Forward):")
print_forward(dll_head)

java implementation 

class Node{
    int data;
    Node prev,next;
    Node(int data)[
        this.data=data;
        this.prev=null;
        this.next=null;
    ]

}
pubic class ArraytoDLL{
    public static Node arrayToDDL(int[] arr){
        if(arr.length==0) return null;
        Node head=new Node(arr[0]);
        Node curr=head;
        for(int i=1;i<arr.length;i++){
            Node newNode=new Node(arr[i]);
            curr.next=newNode;
            newNode.prev=curr;
            curr=newNode;
        }
        return head;
    }
    public static void printForword(Node head)[
        Node curr=head;
        while(curr!=null){
            System.out.print(curr.data);
            if(curr.next!=null)System.out.print("<->");
            curr=curr.next;
        }
        System.out.println();
    ]
    public static void main(String[] args){
        int arr[]={10,2030,50};
        Node dllHesd=arrToDDL(arr);
        System.out.println("Doubly Linked List (Forward):");
        printForward(dllHead);
    }
}

### delete head or first node in doubly linked list 

class Node:
    def __init__(self,data):
        self.data=data
        self.prev=None
        self.next=None
class DoublyLinkedList:
    def __init__(self):
        self.head=None
    def insert_end(self.data):
        new_node=Node(data)
        if not self.head:
            self.head=new_node
            return 
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=new_node
        new_node.prev=temp
    def delete_head(self):
        if not self.head:
            return None 
        if not self.head.next:
            self.head=None
            return
        prev=self.head
        self.head=self.head.next
        self.head.prev=None
        prev.next=None
    def delete_tail(self):
        if not self.head:
            return None
        if not self.head.next:
            self.head=None
            return 
        tail=self.head
        while tail.next:
            tail=tail.next
        new_tail=tail.prev
        new_tail.next=None
        tail.prev=None
    
        
