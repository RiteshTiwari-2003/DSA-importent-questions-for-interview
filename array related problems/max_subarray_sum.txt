maximum subaaray sum 
brute force approach in python 
def max_subarrat-brute(arr):
    n=len(arr)
    max_sum=float('-inf')
    for i in range(n):
        for j in range(i,n):
            current_sum=sum(arr[i:j+1])
            max_sum=max(current_sum,max_sum)
    return max_sum
print("Brute force approach :",max_brute_force(arr))

in java brute force 
public class  MaxSubArrayBrute{
    public static int maxSubArraySum(int[] arr){
        int n=arr.length;
        int maxSum=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int sum=0;
                for(int k=i;k<=j;k++){
                    sum+=arr[k];
                }
                maxSum=Math.max(maxSum,sum);
            }
        }
        return maxSum;
    }
    public static void main(String[] args){
        int[] arr = {-2,1,-3,4,-1,2,1,-5,4};
        System.out.println("Brute Force: " + maxSubarraySum(arr));
    }
}

2 . better approac in python 
def max_sub_array(arr):
    n=len(arr)
    max_sum=float('-inf')
    for i in range(n):
        current_sum=0
        for j in range(i,n):
            current_sum+=arr[j]
            max_sum=max(max_sum,current_sum)
    return max_sum
print("Better:", max_subarray_better([-2,1,-3,4,-1,2,1,-5,4])) 

in java 
public class MaxSubArrayBetter{
    public static int maxSubArray(int[] arr){
        int n=arr.length;
        int maxSum=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int currentSum=0;
            for(int j=i;j<n;j++){
                currentSum+=arr[j];
                maxSum=Math.max(maxSum,currentSum);
            }
        }
        return maxSum;
    }
    public static void main(String[] args){
        int[] arr={-2,1,-3,4,-1,2,1,-5,4};
        System.out.println("Better:"+maxSubArraySum(arr));
    }
}

3. optimal approach kadane's algorithm 
def max_sub_sum(arr):
    current_sum=0
    n=len(arr)
    max_sum=float('-inf')
    for i in range(n):
        ansStart=-1
        ansEnd=-1
        if summ==0:start=i
        current-sum+=arr[i]
        if (current_sum>max_sum):
            andStart=start
            ansEnd=i
            max_sum=current_sum
        if current_sum<0:
            current_sum=0
    return max_sum